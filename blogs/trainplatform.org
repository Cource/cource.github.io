#+title: How languages shape the code you write
#+author: Jeff Jacob Joy
#+date: <2024-02-12 Mon>
#+tags: name
#+desc: This is an article about how different language paradigms affect how we approach the problems we would solve in them.

Recently, I came across an interesting scheduling problem about finding the minimum number of platforms that a station must have given a list of arrival and departure times of N trains. So, I wrote a solution to it in python, and the solution itself is pretty simple.

* Solution in Python
#+begin_src python
def minimum_platforms(arrival, departure):
  platforms = 1
  queue = []
  for i in range(len(arrival)-1):
      for dep in queue:
          if dep < arrival[i+1]:
              queue.pop()
      if departure[i] >= arrival[i+1]:
          queue.append(departure[i])
      platforms = max(platforms, len(queue)+1)
  return platforms
#+end_src

This is a simple function that takes two lists (arrival and departure), assumes that it only requires 1 platform, then takes each train, checks if it temporally overlaps with the previous train. If so, the train is added to a queue. Then, every train in the queue is checked to see if its time for it to depart, if so, it is dequeued(the code for this in the example is wrong). This is repeated until no trains are left.

The minimum platforms required is then the maximum size that the queue reached. I reached this solution by visualizing the trains in time. Here is the visualization i made as ASCII art:
#+begin_src
train1: =     |
train2:   ========
train3:    ====
train4:       ===
train5:       |=
train6:       |   ===
time axis ----------------->
#+end_src
In this visualization, the line passing through trains (drawn using '|') is the point in time where the maximum number of trains where at the station.

* Solution in Rust
#+begin_src rust
use std::convert::TryInto;
use std::iter::zip;

#[derive(Clone)]
struct Train {
    arrival: i32,
    departure: i32,
}

fn trains_in_station_at(trains: &Vec<Train>, time: &i32) -> Vec<Train> {
    trains.iter()
        .filter(|train| time <= &train.departure)
        .filter(|train| time >= &train.arrival)
        .cloned()
        .collect()
}

fn min_platforms(arrivals: Vec<i32>, departures: Vec<i32>) -> i32 {
    let trains = zip(arrivals.clone(),departures)
        .map(|(arrival, departure)| Train {arrival, departure})
        .collect();
  
    arrivals.iter()
        .map(|time| trains_in_station_at(&trains, &time).len())
        .max()
        .unwrap().try_into().unwrap()
}

fn main() {
    let arrivals   = vec![900, 930,  940,  1000, 1020, 1220];
    let departures = vec![910, 1200, 1000, 1100, 1040, 1240];
    println!("{}", min_platforms(arrivals, departures))
}
#+end_src

Rust lets you actually model your data structures, that way, you can pass around the stuff you want without much hassle. In this attempt, my goal was not to make the most optimized piece of code ever written, but to use sensible data structures and procedures to model this problem, which I could use to the solve it.

Here, Rather than constructing a queue where i store every overlapping train, that part is abstracted into a function that returns the trains that were at the station at a given time. Which I use to find the number of trains at the station when each train arrives. Then I take the biggest number from that list, which is the minimum number of platforms required.

This is a much more sensible implementation. But there was too much fighting with the compiler about getting the borrows and cloning right, than i would have liked.

* Solution in Haskell
#+begin_src haskell
#!/usr/bin/env nix-shell
#!nix-shell --pure -i runghc -p "haskellPackages.ghcWithPackages (pkgs: [ pkgs.maximal-cliques pkgs.Unique ])"

import Data.List (subsequences)
import Data.List.Unique (sortUniq)
import Data.Algorithm.MaximalCliques (getMaximalCliques)

type Time = Int
type Graph a = [Edge a]
type Edge a = (a, a)

data Train = Train
  { trainId :: Int
  , arrival :: Time
  , departure :: Time
  } deriving (Eq, Ord)

instance Show Train where
  show (Train trainId _ _) = show trainId

listToPair (a:b:[]) = (a,b)

member :: (Eq a) => (a,a) -> [(a,a)] -> Bool
member _ [] = False
member (a,b) (y:ys)
  | (a,b)==y || (b,a)==y = True
  | otherwise            = member (a,b) ys

everyPair :: [Train] -> [(Train,Train)]
everyPair = map listToPair . filter (\x -> length x == 2) . subsequences

doTrainsOverlap :: Train -> Train -> Bool
doTrainsOverlap (Train _ arr1 dep1) (Train _ arr2 dep2) =
  dep2 >= arr1 && arr2 <= dep1

overlappingTrains :: [Train] -> Graph Train
overlappingTrains =
  filter (uncurry doTrainsOverlap) . everyPair

flatten :: [(a, a)] -> [a]
flatten as = do
  (a, b) <- as
  [a, b]

vertices :: Ord a => Graph a -> [a]
vertices = sortUniq . flatten

minPlatforms :: [Train] -> Int
minPlatforms [] = 0
minPlatforms trains =
  case overlappingTrains trains of
    [] -> 1
    x ->
      (maximum . map length
       . getMaximalCliques (\a b -> member (a,b) x)
       . vertices) x


trainsFromTimes :: [Time] -> [Time] -> [Train]
trainsFromTimes arrs deps =
  drop 1 .
  foldl (\acc (a,d) ->
            acc ++ [Train (((+1) . trainId . last) acc) a d])
        [Train 0 (-1) (-1)]
  $ zip arrs deps

testArrivals = [900, 940, 950, 1100, 1500, 1800] :: [Time]
testDepartures = [910, 1200, 1120, 1130, 1900, 2000] :: [Time]

main :: IO ()
main = print $ minPlatforms $ trainsFromTimes testArrivals testDepartures

#+end_src

Haskell lets you model all sorts of data. And most importantly, it allows for local reasoning because its a purely functional lanuguage (and thus, side effects are not allowed). This means that you can transform the input data however you want as long as the types match. Also, because it encourages you to abstract stuff more and more, you end up finding patterns in places you would have totally not expected them to be in.

In this solution, I created a function that finds the temporally overlapping trains. Thus im not depending on the data being in a certain sequence (in the previous solutions the trains had to be sorted). This is done be taking every possible pair of trains, then filtering out the overlapping ones.

This list of overlaps is of the type =[(Train, Train)]= which looks an awful lot like a graph, especially when you look at an example:
#+begin_src
[(2,3),(2,4),(3,4),(5,6)]
#+end_src
So, I tried drawing out a graph using it:

[[https://cource.github.io/assets/blogs/graph1.png]]

the solution to this problem was 3, which seems to be the number of nodes in this triangle. So, I tried one with 4 platforms (by adding a train that overlaps every other train):

[[https://cource.github.io/assets/blogs/graph2.png]]

and 4 is surely enough, the number of nodes in the biggest fully connected component, which is also called the biggest maximal clique in graph theory terminology.

Thus this whole problem could be solved by finding the *number of nodes in largest maximal clique in the graph of temporal overlaps of the trains*.
And that is exactly what I did. There was a library on hackage that implements an algorithm for finding the maximal cliques in a graph, so I just used that.

* Conclusion
Python is dynamically typed, so you are pretty much on your own, dont expect any help from the nonexistent compiler, though there are js style type hints in the newer versions it seems. This limited me to a very imperative style of progamming where I'm thinking of what known "best practices" I can use to get what i have to look more like the result i want.

This means that I am fixated on getting it to work for a given example. And after doing enough trial and error, without having a solid grasp over why things work they way they do (due to the lack of local reasoning), you inevitably miss a few classes of bugs, or totally forget that you wrote some code before just for testing that you have to replace with real code (which is what happened with the queue.pop in the example)

Rust is statically typed, and has a pretty robust way to model your data, this means that you have a way to model what your functions should do before writing the functions themselves. This helps you think more in terms of data and operations you perform on that data, given that you are already familiar with data oriented programming, otherwise you just end up doing object oriented programming by making a class using a struct, and impl-ing class methods onto it.

Haskell, as far as i know, has the best way to represent/model data and behaviour. Its so powerful that you can actually use it as a language to model a real world system (as in, use it to organize your understanding of the relationships between things in the real world). In haskell, you can just model your problem, and once you have modeled it, you just run the model and extract whatever you want from that model. This method is called domain modelling, and there are a lot of resources about it online if you intent on learning more about it.
